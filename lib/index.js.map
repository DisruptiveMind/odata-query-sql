{"version":3,"file":"index.js","sourceRoot":"","sources":["..\\index.ts"],"names":[],"mappings":"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","sourcesContent":["const _ = require(\"lodash\");\nconst queryBuilder = require(\"@iamthes/query-builder\");\nconst odataParser = require(\"odata-parser\");\n\nexport = query;\n\nfunction query(query, options = {}) {\n    var dialect = _.get(options, \"dialect\");\n    var sql = queryBuilder.create(dialect)();\n    var resource = _.get(options, \"resource\");\n    var defaultLimit = _.get(options, \"defaultLimit\", 50);\n    var hasCount = _.has(query, \"$count\");\n    var expands = parse(query.$expand, \"$expand\");\n    var data = {\n        table: resource,\n        selects: parseSelect(query.$select),\n        wheres: parseFilter(query.$filter),\n        offset: parseOffset(query.$skip),\n        limit: parseLimit(query.$top, defaultLimit),\n        orderbys: parse(query.$orderby, \"$orderby\")\n    }\n    var result: any = {};\n    result.value = selectData(sql, data);\n    if (hasCount) {\n        result.count = selectCount(sql, data);\n    }\n    if (expands.length > 0) {\n        result.expand = {};\n        expands.forEach(property => {\n            result.expand[property] = selectExpand(sql, property, data);\n        });\n    }\n    return result;\n}\n\nfunction selectExpand(sql, name, {table, wheres}) {\n    var idField = name + \"_id\"; // TODO: Fix hardcoded value\n    sql.select(idField);\n    sql.table(table);\n    wheres.forEach(expr => {\n        var method = expr.method;\n        var args = expr.args || [];\n        sql[method](...args);\n    });\n    var subquery = sql.get();\n    var result = sql.select()\n        .table(name)\n        .where(\"id\", \"in\", `@(${subquery})`)\n        .get();\n    return result;\n}\n\nfunction selectCount(sql, {table, wheres}) {\n    sql.table(table);\n    sql.select(\"count\", \"*\", \"\");\n    wheres.forEach(expr => {\n        var method = expr.method;\n        var args = expr.args || [];\n        sql[method](...args);\n    });\n    return sql.get();\n}\n\nfunction selectData(sql, {table, selects, wheres, orderbys, offset, limit}) {\n    sql.table(table);\n    selects.forEach(s => sql.select(s));\n    wheres.forEach(expr => {\n        var method = expr.method;\n        var args = expr.args || [];\n        sql[method](...args);\n    });\n    orderbys.forEach(o => {\n        var [field] = Object.keys(o);\n        var direction = o[field];\n        sql.orderBy(field, direction);\n    });\n    sql.limit(limit);\n    if (offset) sql.offset(offset);\n    return sql.get();\n}\n\nfunction parse(value: any, property: string): Array<any> {\n    if (!value) return [];\n    var {[property]: result} = odataParser.parse(`${property}=${value}`);\n    return result;\n}\n\nfunction parseSelect(value: any) {\n    var result = parse(value, \"$select\");\n    if (result.length === 0) {\n        result = [\"*\"];\n    }\n    return result;\n}\n\nfunction parseOffset(value: any) {\n    return _.clamp(+value, 0, 500);\n}\n\nfunction parseLimit(value: any, d = 50) {\n    value = +value;\n    if (_.isNaN(value)) value = d;\n    var result: number = _.clamp(value, 1, 500);\n    return result;\n}\n\nfunction parseFilter(value: any) {\n    if (!value) return [];\n    var node = parse(value, \"$filter\");\n    return traverse(node);\n}\n\nfunction traverse(node, acc = []) {\n    if (node.left.type === \"property\" && node.right.type === \"literal\") {\n        acc.push({\n            method: \"where\",\n            args: [node.left.name, operatorToExpr(node.type), node.right.value]\n        });\n        return acc;\n    }\n    traverse(node.left, acc);\n    acc.push({ method: typeToMethod(node.type) });\n    traverse(node.right, acc);\n    return acc;\n}\n\nfunction typeToMethod(type) {\n    switch (type) {\n        case \"and\": return \"andOp\";\n        case \"or\": return \"orOp\";\n    }\n    throw new Error(`typeToMethod failed, unknown type ${type}.`);\n}\n\nfunction operatorToExpr(op) {\n    switch (op) {\n        case \"eq\": return \"=\";\n        case \"lt\": return \"<\";\n        case \"le\": return \"<=\";\n        case \"gt\": return \">\";\n        case \"ge\": return \">=\";\n    }\n    throw new Error(`operatorToExpr method failed, unknown operator ${op}.`);\n}"]}